plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id("io.github.juuxel.loom-quiltflower-mini") version "1.1.0"
    id 'java-library'
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.6.1'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${getMCVersionString()}"
group = project.maven_group

boolean isMCVersionNonRelease() {
    return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
            || project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
    if (isMCVersionNonRelease()) {
        return project.minecraft_version
    }
    def version = project.minecraft_version.split('\\.')
    return version[0] + '.' + version[1]
}

String parseReadme() {
    def excludeRegex = /(?m)<!-- modrinth_exclude\.start -->(.|\n)*?<!-- modrinth_exclude\.end -->/
    def linkRegex = /!\[([A-z_ ]+)]\((images\/[A-z.\/_]+)\)/

    def readme = (String) file('README.md').text
    readme = readme.replaceAll(excludeRegex, '')
    return readme
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    shadow
    api.extendsFrom shadow
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

license {
    header file('HEADER')
    include '**/*.java'
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        mavenLocal()
        maven {
            name = 'BuildDirLocal'
            url = "$buildDir/repo"
        }

        def fuckNameMcMaven = System.getenv('FUCK_NAMEMC_MAVEN')
        if (fuckNameMcMaven) {
            maven {
                name = 'FuckNameMCMaven'
                url = uri(fuckNameMcMaven)
                credentials {
                    username = project.findProperty('gpr.user') ?: System.getenv('MAVEN_USERNAME')
                    password = project.findProperty('gpr.key') ?: System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}